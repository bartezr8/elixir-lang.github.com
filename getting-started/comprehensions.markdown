---
layout: getting-started
title: Comprehensions (Абстракция списков)
---

# {{ page.title }}

{% include toc.html %}

*Примечание*: к сожалению я неспог найти точного определения данного термина поэтому оставляют его без перевода. В википедии для него дается следующее описание:

> Абстракция списков или списковое включение (англ. list comprehension, нем. Erfassung der Liste) в синтаксисе некоторых языков программирования — это способ компактного описания операций обработки списков.

>Списковое включение позволяет вычислять и бесконечные списки (в языках, которые их поддерживают). Например, на языке Миранда бесконечный список чётных положительных чисел можно записать следующим образом:

В Elixir, обычной задачей является перебор списков, кортежей и т.д, так же часто возникает необходимость отфильтровать список по какому то критерию, а из данных полученых при этом создать новый список. *Comprehensions* является синтаксическим сахаром позволяя сгруппировать схожие задачи в специальную форму для использования совместно с оператором `for`.

Например, мы можем отобразить список целых чисел в их значения в квадрате:

```iex
iex> for n <- [1, 2, 3, 4], do: n * n
[1, 4, 9, 16]
```

Абстракция списков состоит из трех частей: генераторы, фильтры и коллекции.

## Генераторы и фильтры

В выражении выше , `n <- [1, 2, 3, 4]` используются **генераторы**. В данном примере мы буквально генерируем значения которые будут использоватся в *comprehension*. Справа от выражения в котором используется генератор можно использовать любой перечисляемый тип данных:

```iex
iex> for n <- 1..4, do: n * n
[1, 4, 9, 16]
```

В выражениях использующих генераторы можно использовать *pattern matching* в левой части выражения; Все паттерны не являющиеся *pattern matching* игнорируются *ignored*. Представте, что вместо диапозонов, мы используем список ключевых слов, в котором в качестве ключа выступает атом `:good` и `:bad` и мы хотим вычислить только квадрат из значения `:good`:

```iex
iex> values = [good: 1, good: 2, bad: 3, good: 4]
iex> for {:good, n} <- values, do: n * n
[1, 4, 16]
```

Альтернативой *pattern matching*, выступают фильтры которые могут быть использованны для получения конкретных значений. Например, мы можем выбрать три значения из списка и отказатся от других:

```iex
iex> multiple_of_3? = fn(n) -> rem(n, 3) == 0 end
iex> for n <- 0..5, multiple_of_3?.(n), do: n * n
[0, 9]
```

*Comprehensions* отбрасывает все элементы для которых выражение возвращает `false` или `nil`; Все остальные значения остаются выбранными.

Comprehensions представляет собой более краткую запись некоторых функций из модулей `Enum` и `Stream`. Кроме того, comprehensions позволяет использовать несколько фильтров и генераторов одновременно. Для примера, возьмем список папок и вычислим размер каждого файла, для каждой папки:

```elixir
dirs = ['/home/mikey', '/home/james']
for dir  <- dirs,
    file <- File.ls!(dir),
    path = Path.join(dir, file),
    File.regular?(path) do
  File.stat!(path).size
end
```

Множество генераторов можно также использовать для вычисления декартового произведения двух списков:

```iex
iex> for i <- [:a, :b, :c], j <- [1, 2], do:  {i, j}
[a: 1, a: 2, b: 1, b: 2, c: 1, c: 2]
```

Более продвинутый пример множественных генераторов и фильтров - это триплеты Пифагора. Пифагорейская тройка представляет собой набор натуральных чисел, таких как `a * a + b * b = c * c`, напишем *Comprehensions* в файле с именем` triple.exs`:

```elixir
defmodule Triple do
  def pythagorean(n) when n > 0 do
    for a <- 1..n,
        b <- 1..n,
        c <- 1..n,
        a + b + c <= n,
        a*a + b*b == c*c,
        do: {a, b, c}
  end
end
```

Выполним в терминале команду:

```bash
iex triple.exs
```

```iex
iex> Triple.pythagorean(5)
[]
iex> Triple.pythagorean(12)
[{3, 4, 5}, {4, 3, 5}]
iex> Triple.pythagorean(48)
[{3, 4, 5}, {4, 3, 5}, {5, 12, 13}, {6, 8, 10}, {8, 6, 10}, {8, 15, 17},
 {9, 12, 15}, {12, 5, 13}, {12, 9, 15}, {12, 16, 20}, {15, 8, 17}, {16, 12, 20}]
```

Пример приведенный выше является ресурсозатратным когда диапазон для поиска состоит из большого количества элементов. Кроме того, поскольку кортеж `{b, a, c}` являтеся той же самой Пифагоровской тройкой, как и `{a, b, c}`, наша функция будет дублировать тройки. Мы можем оптимизировать работу comprehension и исключить возможность дублирования результатов, используя результат работы предыдущего генератора в последующих, например:

```elixir
defmodule Triple do
  def pythagorean(n) when n > 0 do
    for a <- 1..n-2,
        b <- a+1..n-1,
        c <- b+1..n,
        a + b + c <= n,
        a*a + b*b == c*c,
        do: {a, b, c}
  end
end
```

И наконец, имейте в виду что обявление переменной внутри *comprehension*, будь то генератор, фильтр или внутри блока, они будет недоступна снаружи comprehension.

## Генераторы битовых строк

В Elixir доступны генераторы битовых строк, они крайне полезны когда вам необходимо выполнять обработку потока битовых строк. В примере ниже мы получаем список пикселей из двоичного файла, с их соответствующими значениями красного, зеленого и синего и преобразуем их в кортежи по три элемента в каждом:

```iex
iex> pixels = <<213, 45, 132, 64, 76, 32, 76, 0, 0, 234, 32, 15>>
iex> for <<r::8, g::8, b::8 <- pixels>>, do: {r, g, b}
[{213, 45, 132}, {64, 76, 32}, {76, 0, 0}, {234, 32, 15}]
```

Генератор битовых строк может быть смешан с «обычными» перечислимыми генераторами и также поддерживает фильтры.

## Опция `:into`

В примере выше, все *comprehensions* возвращают список в качестве результата. Однако, результат *comprehension* может быть передан в другую структуру данных посредством опции `:into`.

Например, генератор битовых строк может быть использован с опцией `:into` для быстрого удаления всех пробелов в строке:

```iex
iex> for <<c <- " hello world ">>, c != ?\s, into: "", do: <<c>>
"helloworld"
```

Наборы, maps и другие словари могут использовать опцию `:into`. В целом, `:into` может использовать любая структура реализованная через протокол `Collectable`.

Частым случаем применения опции `:into` является процедура преобразования значения в map, не затрагивая при этом ключи:

```iex
iex> for {key, val} <- %{"a" => 1, "b" => 2}, into: %{}, do: {key, val * val}
%{"a" => 1, "b" => 4}
```

Давайте рассмотрим другой пример который использует потоки. Мы будем использовать модуль `IO` который предоставляет инструменты для работы с потоками (так же как `Enumerable`s и `Collectable`s), мы напишем эхо-терминал который будет возвращать модифицированную версию, результатов выведеных в `stdio`, это можно сделать используя *comprehensions*:

```iex
iex> stream = IO.stream(:stdio, :line)
iex> for line <- stream, into: stream do
...>   String.upcase(line) <> "\n"
...> end
```

Теперь введите любую строку в терминал, и вы увидите что одно и тоже значение будет выведено в терминал дважды вверхнем регистре и нижнем. К сожалению, этот пример так же будет влиять на работу IEx, поэтому для выхода вам нужно будет дважды нажать `Ctrl+C`. :)
