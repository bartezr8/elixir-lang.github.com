---
layout: getting-started
title: Базовые операторы
---

# {{ page.title }}

{% include toc.html %}

В [предыдущем уроке](/getting-started/basic-types.html), мы рассматривали арифмитические операторы `+`, `-`, `*`, `/`, а так же функции `div/2` и `rem/2` для целочисленного деления и деления с остатком.

Так же в Elixir доступны операторы `++` и `--` для работы с списками:

```iex
iex> [1, 2, 3] ++ [4, 5, 6]
[1, 2, 3, 4, 5, 6]
iex> [1, 2, 3] -- [2]
[1, 3]
```

Для конкатенации строк предназначен оператор `<>`:

```iex
iex> "foo" <> "bar"
"foobar"
```

В Elixir реализованны логические операторы истинности: `or`, `and` и `not`. Данные операторы предназначены для строгого сравнения, в качестве первого агрумента они принимают только логические значения (`true` или `false`):

```iex
iex> true and true
true
iex> false or is_atom(:example)
true
```

Использование не булевых значений приведет к возникновению ошибок в ходе выполнения:

```iex
iex> 1 and true
** (BadBooleanError) ожидалось булево значение слево от "and", получено: 1
```

`or` и `and` операторы короткого цикла. Они выполняют правую часть выражения только в том случае если левой части выражения недостаточно для вычисления результата:

```iex
iex> false and raise("Эта ошибка никогда не возникнет")
false
iex> true or raise("Эта ошибка никогда не возникнет")
true
```

> Примечание: Если вы занкомы с Erlang, то вам будет полезго знать что операторы `and` и `or` в Elixir аналогичны операторам `andalso` и `orelse` в Erlang.

Помимо булевых операторов, в Elixir доступны операторы `||`, `&&` и `!` которые в качестве аргументов сравнения принимают данные любого типа. Для данных операторов, все значения за исключением `false` и `nil` эквивалентны `true`:

```iex
# or
iex> 1 || true
1
iex> false || 11
11

# and
iex> nil && 13
nil
iex> true && 17
17

# !
iex> !true
false
iex> !1
false
iex> !nil
true
```

Как показывает опыт, использовать `and`, `or` и `not` рекомендуется для работы с булевыми значениями. В остальных случаях, при работе с не булевыми значениями лучше всего использовать `&&`, `||` и `!`.

В Elixir для сравнения данных используются операторы `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<`, и `>`:

```iex
iex> 1 == 1
true
iex> 1 != 2
true
iex> 1 < 2
true
```

Разница меджу `==` и `===` заключается в более строгом сравнении целых чисел и чисел с плавающей точкой:

```iex
iex> 1 == 1.0
true
iex> 1 === 1.0
false
```

В Elixir, мы можем сравнивать два разных типа данных:

```iex
iex> 1 < :atom
true
```

The reason we can compare different data types is pragmatism. Алгоритмы сортировки не требуют строгого соотвествия типов данных для определения порядка сортировки. Пример сравнения основных типов в Elixir предствлен ниже:

    number < atom < reference < function < port < pid < tuple < map < list < bitstring

Особой необходимости запоминать порядок сортировки основных типов нету, достаточно просто знать что она есть.

For reference information about operators (and ordering), check the [reference page on operators](/docs/master/elixir/operators.html).

In the next chapter, we are going to discuss some basic functions, data type conversions, and a bit of control flow.
